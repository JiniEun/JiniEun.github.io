[{"content":"\n[NGINX] NGINX란? NGINX 설치 \nNginx란?  NginX란? 웹 서버 소프트웨어로, 가벼움과 높은 성능을 목표로 한다. 웹 서버, 리버스 프록시 및 메일 프록시 기능을 가진다. Nginx는 요청에 응답하기 위해 비동기 이벤트 기반 구조를 가지며, 이는 아파치 HTTP 서버의 스레드/프로세스 기반 구조를 가지는 것과는 대조적이다. 이러한 구조는 서버에 많은 부하가 생길 경우의 성능을 예측하기 쉽게 해준다. 출처: [위키백과]\n 간단하게 말하면 경량 웹 서버이며, 클라이언트로부터 요청을 받았을 때 요청에 맞는 정적 파일을 응답해주는 HTTP Web Server로 활용되기도 하고, Reverse Proxy Server로 활용하여 WAS 서버의 부하를 줄일 수 있는 로드 밸런서로 활용되기도 한다.\n\nNGINX 설치하기 개발 환경: Mac\n아래 방법으로 NGINX를 설치하기 전 brew 패키지 관리자가 설치되어 있어야 한다.\n Homebrew 버전 확인  brew -v  nginx 설치하기  brew install nginx → brew를 이용해 NginX를 설치한다.\n\nnginx.conf 파일 경로 확인하기 brew info nginx → brew info ${package명}: 해당 패키지가 어느 위치에 설치되어 있는 지 확인 가능하다.\n설치되어 있는 경우 아래와 같이 정보를 확인할 수 있다.\nnginx: stable 1.21.6, HEAD HTTP(S) server and reverse proxy, and IMAP/POP3 proxy server https://nginx.org/ /opt/homebrew/Cellar/nginx/1.21.6_1 (26 files, 2.2MB) * Poured from bottle on 2022-04-13 at 14:30:40 From: https://github.com/Homebrew/homebrew-core/blob/HEAD/Formula/nginx.rb License: BSD-2-Clause ==\u0026gt; Dependencies Required: openssl@1.1 ✔, pcre2 ✔ ==\u0026gt; Options --HEAD Install HEAD version ==\u0026gt; Caveats Docroot is: /opt/homebrew/var/www The default port has been set in /opt/homebrew/etc/nginx/nginx.conf to 8080 so that nginx can run without sudo. nginx will load all files in /opt/homebrew/etc/nginx/servers/. To restart nginx after an upgrade: brew services restart nginx Or, if you don\u0026#39;t want/need a background service you can just run: /opt/homebrew/opt/nginx/bin/nginx -g daemon off; ==\u0026gt; Analytics install: 39,803 (30 days), 123,899 (90 days), 485,441 (365 days) install-on-request: 39,713 (30 days), 123,684 (90 days), 484,435 (365 days) build-error: 24 (30 days) 맥 버전이나 상황에 따라 설치 위치가 다를 수 있으니, 스스로 확인해보는 것이 제일 정확하다.\n본인의 경우에는\n/opt/homebrew/etc/nginx/nginx.conf 에 conf 파일이 위치해 있다.\n\nnginx.conf 파일 수정 아래 코드를 통해 nginx.conf 파일을 수정할 수 있다. (password를 요구하는 경우 컴퓨터 비밀번호를 입력하면 된다.)\nsudo vim /opt/homebrew/etc/nginx/nginx.conf nginx.conf 파일을 확인 하면 server 부분이 설정되어 있다.\nserver { listen 8080; server_name localhost; #charset koi8-r; #access_log logs/host.access.log main; location / { root html; index index.html index.htm; } #error_page 404 /404.html;  기본 포트를 변경하고 싶다면  listen 80; 위와 같이 원하는 포트로 수정이 가능하다.\n root html은 웹 루트 디렉토리의 심볼릭 링크이며 개인용으로 사용한다면 루트 디렉터리 설정을 변경하는 것보다 심볼릭 링크를 그대로 가져와서 사용하려면 아래와 같이 이용한다.  # 접근하기 쉽고, 원하는 디렉토리에서 심볼릭 링크를 생성. ln -s /opt/homebrew/var/www [링크 이름] \nHomebrew로 백그라운드 서비스 관리 brew services # 자동으로 homebrew/services를 tap, 현재 설치된 서비스 목록 확인 brew services [run|start|stop|restart|cleanup] service_name # 명령어 # run - 시작하되, 시작프로그램으로 등록하지 않음 # start - 시작하고 시작프로그램으로 등록 brew services start nginx # nginx 시작 homebrew services를 이용하면 쉽게 백그라운드 서비스를 관리할 수 있다.\nconf 파일 수정을 완료한다면 아래 명령어로 nginx를 재시작 할 수 있다.\nbrew service restart nginx \nNGINX 명령어 # 시작 nginx # 중지 nginx -s stop # 재시작 nginx -s reload \nReference https://ko.wikipedia.org/wiki/Nginx\nhttps://icarus8050.tistory.com/57\nhttps://jehwanyoo.net/2021/04/06/mac-NGINX-Tutorial-1-NGINX-설치/\n\n","permalink":"https://JiniEun.github.io/posts/nginx/","summary":"[NGINX] NGINX란? NGINX 설치 \nNginx란?  NginX란? 웹 서버 소프트웨어로, 가벼움과 높은 성능을 목표로 한다. 웹 서버, 리버스 프록시 및 메일 프록시 기능을 가진다. Nginx는 요청에 응답하기 위해 비동기 이벤트 기반 구조를 가지며, 이는 아파치 HTTP 서버의 스레드/프로세스 기반 구조를 가지는 것과는 대조적이다. 이러한 구조는 서버에 많은 부하가 생길 경우의 성능을 예측하기 쉽게 해준다. 출처: [위키백과]\n 간단하게 말하면 경량 웹 서버이며, 클라이언트로부터 요청을 받았을 때 요청에 맞는 정적 파일을 응답해주는 HTTP Web Server로 활용되기도 하고, Reverse Proxy Server로 활용하여 WAS 서버의 부하를 줄일 수 있는 로드 밸런서로 활용되기도 한다.","title":"NGINX"},{"content":"MovieShelf (2022.02-) Molog (2022.02-) Dongne (2021.11-12) Petcare (2020.03-05) Dipex (2019.09-11) MovieShelf Spring Boot 기반 웹 프로젝트\n프로젝트 주제 영화 검색 웹 페이지 제작\nStack Java, Springboot, React JS\n구현 기능 Oracle Cloud DB를 연동하여 REST API 개발 회원 기능\n Swagger TDD  Molog Shopping Spring Boot 기반 웹 프로젝트\n프로젝트 주제 쇼핑몰 형태, 기능의 웹 페이지 제작\n구현 기능  웹페이지 내의 로그인, 회원가입 기능 공지사항, 상품 게시판 CRUD 주문, 장바구니 기능 구현 Oracle Cloud DB를 연결 운용 경험  Dongne Spring Boot 기반 웹 프로젝트\n프로젝트 주제 및 목적 동네의 정보를 제공하고 주민 간 정보를 공유할 수 있는 종합 커뮤니티 웹 제작\n내가 살고 있는 동네의 정보를 한 번에 확인하고, 사용자 간 동네의 실시간 정보를 빠르게 주고받을 수 있도록 한다. 흩어져 있는 동네의 여러 정보들을 해당 종합 커뮤니티 웹 서비스를 통해 편리하게 접근하고, 같은 지역내의 사용자 간의 자유로운 정보 공유를 가능하도록 한다.\nStack Java, Springboot, AWS, Oracle DB, JSP, Bootstrap\n구현 기능  웹페이지 내의 로그인, 회원가입 기능 공지사항 게시판 CRUD Naver Map API를 이용한 지도 서비스 연결 및 위·경도, 주소 변환 작업 Naver Clova Chatbot을 이용한 챗봇 서비스 연결 AWS EC2를 이용해 배포 진행 경험 (Naver Open API Issue 해결을 위해 현재 중단)  -\u0026gt; 팀 내의 수석 프로그래머로, 전체적인 기능 수정, 디자인 수정, git 병합 등 총괄 역할 수행\nPetCare 2020-1 Capstone-Design\n프로젝트 주제 펫에 관련된 종합 정보를 제공하는 앱 어플리케이션 제작\nstack Java, Anfroid Studio, Firebase, GoogleCloud, JSoup\nDipex 2019-2 Capstone-Design\n프로젝트 주제 비디오 플레이어를 포함한 간단한 웹 페이지 제작 스크립트를 포함한 페이지 의료 정보를 제공하는 웹 페이지 리팩토링\nStack HTML, CSS, Javascript, ReactJs, plyr, Python, Django, NGINX, MySQL, Amazon AWS\nFinal Result https://roamgom.github.io/front_dipex/\n","permalink":"https://JiniEun.github.io/posts/projects/","summary":"MovieShelf (2022.02-) Molog (2022.02-) Dongne (2021.11-12) Petcare (2020.03-05) Dipex (2019.09-11) MovieShelf Spring Boot 기반 웹 프로젝트\n프로젝트 주제 영화 검색 웹 페이지 제작\nStack Java, Springboot, React JS\n구현 기능 Oracle Cloud DB를 연동하여 REST API 개발 회원 기능\n Swagger TDD  Molog Shopping Spring Boot 기반 웹 프로젝트\n프로젝트 주제 쇼핑몰 형태, 기능의 웹 페이지 제작\n구현 기능  웹페이지 내의 로그인, 회원가입 기능 공지사항, 상품 게시판 CRUD 주문, 장바구니 기능 구현 Oracle Cloud DB를 연결 운용 경험  Dongne Spring Boot 기반 웹 프로젝트","title":"Projects"}]